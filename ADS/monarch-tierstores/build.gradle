apply plugin: 'java'

repositories {
    maven { url "https://s3-us-west-2.amazonaws.com/ampool/mvn-repo" }
    mavenCentral()
    mavenLocal()
}

dependencies {
    provided project(':geode-core')
    testCompile project(':geode-junit')

    testCompile project(':geode-core').sourceSets.test.output
    testCompile project(':geode-junit').sourceSets.test.output
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-minicluster
    testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.7.2'

    testCompile('org.apache.hadoop:hadoop-minikdc:2.7.2') {
        exclude group: 'org.apache.directory.api', module: 'api-ldap-schema-data'
        exclude group: 'org.apache.directory.api', module: 'api-all'
    }

    testCompile('org.apache.directory.server:apacheds-all:2.0.0-M15') {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.directory.api', module: 'api-ldap-schema-data'
    }
    // https://mvnrepository.com/artifact/org.apache.directory.server/apacheds-core
    testCompile('org.apache.directory.server:apacheds-core:2.0.0-M15') {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.directory.api', module: 'api-ldap-schema-data'
    }
    // https://mvnrepository.com/artifact/org.apache.directory.server/apacheds-server-integ
    testCompile('org.apache.directory.server:apacheds-server-integ:2.0.0-M15') {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.directory.api', module: 'api-ldap-schema-data'
    }

    compile('org.apache.hive:hive-exec:' + project.'hive-exec.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
        exclude group: 'com.google.guava'
    }

    compile(group: 'org.apache.hadoop', name: 'hadoop-common', version: project.'hadoop.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }
    compile(group: 'org.apache.hadoop', name: 'hadoop-archives', version: project.'hadoop.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }
    compile(group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: project.'hadoop.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }
    compile(group: 'org.apache.hadoop', name: 'hadoop-yarn-api', version: project.'hadoop.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }
    compile(group: 'org.apache.hadoop', name: 'hadoop-yarn-common', version: project.'hadoop.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }

    compile(group: 'org.apache.hadoop', name: 'hadoop-yarn-client', version: project.'hadoop.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }

    compile(group: 'org.apache.hadoop', name: 'hadoop-aws', version: project.'hadoop.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }

    // required by hadoop hdfs client
    compile(group: 'org.apache.htrace', name: 'htrace-core', version: '3.1.0-incubating') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }

    // https://mvnrepository.com/artifact/org.apache.parquet/parquet-avro
    compile(group: 'org.apache.parquet', name: 'parquet-avro', version: project.'parquet-hadoop.version') {
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }

    runtime('org.apache.hadoop:hadoop-mapreduce-client-core:' + project.'hadoop-mapreduce-client-core.version') {
        exclude module: 'pentaho-aggdesigner-algorithm'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'javax.servlet'
        exclude group: 'xerces'
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }
}

idea.module.iml {
    whenMerged { module ->
        module.dependencies.removeAll { entry -> entry.toString().contains('geode-core/build') }
    }
}

def generatedResources = "$buildDir/generated-resources/main"
def buildDirectory = "$buildDir"


ext.readScmInfo = {
    try {
        def git = org.ajoberstar.grgit.Grgit.open(currentDir: projectDir)
        try {
            return [
                    'Source-Repository': git.branch.getCurrent().name,
                    'Source-Revision'  : git.head().id,
                    'Source-Date'      : git.head().getDate().format('yyyy-MM-dd HH:mm:ss Z')
            ] as Properties
        } finally {
            git.close()
        }
    } catch (IllegalArgumentException e) {
        // if we're building from the source distribution, we don't have git so
        // use cached info written during the assembly process
        def buildInfo = file "$rootDir/.buildinfo"
        if (buildInfo.exists()) {
            def props = new Properties()
            new FileInputStream(buildInfo).withStream { fis ->
                props.load(fis)
            }
            return props
        }

        logger.warn('***** Unable to find Git workspace. Using default version information *****')
        return [
                'Source-Repository': 'UNKNOWN',
                'Source-Revision'  : 'UNKNOWN',
                'Source-Date'      : new Date().format('yyyy-MM-dd HH:mm:ss Z')
        ] as Properties
    }
}

jar {
    from sourceSets.main.output
    extension 'jar'
    archiveName 'monarch-tierstores-' + ampool_versionNumber + ampool_releaseType + '.jar'
}